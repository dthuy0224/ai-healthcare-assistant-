/**
 * AI Health Care Assistant - Chat Interface JavaScript
 * Handles real-time chat functionality, voice input, and AI responses
 */

document.addEventListener('DOMContentLoaded', function() {
    initializeChat();
});

let isRecording = false;
let mediaRecorder = null;
let audioChunks = [];

/**
 * Initialize Chat Interface
 */
function initializeChat() {
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-btn');
    const voiceButton = document.getElementById('voice-btn');
    const emergencyButton = document.querySelector('.emergency-btn');

    if (messageInput) {
        // Input event listeners
        messageInput.addEventListener('input', handleInputChange);
        messageInput.addEventListener('keypress', handleKeyPress);

        // Send button
        if (sendButton) {
            sendButton.addEventListener('click', sendMessage);
        }

        // Voice button
        if (voiceButton) {
            voiceButton.addEventListener('click', toggleVoiceRecording);
        }

        // Emergency button
        if (emergencyButton) {
            emergencyButton.addEventListener('click', showEmergencyModal);
        }

        // Quick replies
        initializeQuickReplies();

        // Auto-focus input
        messageInput.focus();

        // Scroll to bottom on load
        scrollToBottom();
    }
}

/**
 * Handle Input Changes
 */
function handleInputChange(event) {
    const input = event.target;
    const sendButton = document.getElementById('send-btn');

    // Enable/disable send button
    if (sendButton) {
        sendButton.disabled = input.value.trim().length === 0;
    }

    // Auto-resize textarea if needed
    if (input.tagName === 'TEXTAREA') {
        input.style.height = 'auto';
        input.style.height = input.scrollHeight + 'px';
    }
}

/**
 * Handle Key Press Events
 */
function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

/**
 * Send Message to AI
 */
async function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();

    if (!message) return;

    // Add user message to chat
    addMessage(message, 'user');

    // Clear input
    messageInput.value = '';
    handleInputChange({ target: messageInput });

    // Show typing indicator
    showTypingIndicator();

    try {
        // Simulate AI response (replace with actual API call)
        const response = await getAIResponse(message);

        // Hide typing indicator
        hideTypingIndicator();

        // Add AI response
        setTimeout(() => {
            addMessage(response.message, 'ai', response.type, response.data);
        }, 500);

    } catch (error) {
        console.error('Error sending message:', error);
        hideTypingIndicator();
        addMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.', 'ai', 'error');
    }
}

/**
 * Add Message to Chat
 */
function addMessage(content, sender, type = 'text', data = null) {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;

    const messageWrapper = document.createElement('div');
    messageWrapper.className = `message-wrapper ${sender}-message`;

    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';

    // Avatar
    const avatar = document.createElement('div');
    avatar.className = 'message-avatar';

    if (sender === 'ai') {
        avatar.innerHTML = `
            <svg class="w-6 h-6 text-primary-blue" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
        `;
        messageWrapper.appendChild(avatar);
    }

    // Message bubble
    if (type === 'medical-insight') {
        messageContent.appendChild(createMedicalInsightCard(data));
    } else {
        const bubble = document.createElement('div');
        bubble.className = 'message-bubble';
        bubble.innerHTML = formatMessage(content);
        messageContent.appendChild(bubble);
    }

    // Timestamp
    const timestamp = document.createElement('div');
    timestamp.className = 'message-time';
    timestamp.textContent = new Date().toLocaleTimeString('vi-VN', {
        hour: '2-digit',
        minute: '2-digit'
    });
    messageContent.appendChild(timestamp);

    if (sender === 'user') {
        messageWrapper.appendChild(messageContent);
        messageWrapper.appendChild(avatar);
    } else {
        messageWrapper.appendChild(avatar);
        messageWrapper.appendChild(messageContent);
    }

    chatMessages.appendChild(messageWrapper);
    scrollToBottom();
}

/**
 * Create Medical Insight Card
 */
function createMedicalInsightCard(data) {
    const card = document.createElement('div');
    card.className = 'medical-insight-card';

    card.innerHTML = `
        <div class="insight-header">
            <div class="insight-icon">üîç</div>
            <div>
                <h4 class="insight-title">Ph√¢n t√≠ch tri·ªáu ch·ª©ng</h4>
                <div class="severity-indicator severity-${data.severity || 'medium'}">${data.severityText || 'M·ª©c ƒë·ªô trung b√¨nh'}</div>
            </div>
        </div>
        <div class="insight-content">
            <p><strong>Tri·ªáu ch·ª©ng c·ªßa b·∫°n:</strong> ${data.symptoms || 'ƒêang ph√¢n t√≠ch...'}</p>
            ${data.causes ? `
            <ul class="mt-2 space-y-1">
                ${data.causes.map(cause => `<li>‚Ä¢ ${cause}</li>`).join('')}
            </ul>
            ` : ''}

            ${data.recommendations ? `
            <div class="recommendations mt-4">
                <h5 class="font-medium text-gray-900">Khuy·∫øn ngh·ªã:</h5>
                <ul class="mt-2 space-y-2">
                    ${data.recommendations.map(rec => `<li>${rec.icon || '‚úÖ'} ${rec.text}</li>`).join('')}
                </ul>
            </div>
            ` : ''}
        </div>
        <div class="insight-actions">
            <button class="action-btn primary" onclick="scheduleAppointment()">ƒê·∫∑t l·ªãch kh√°m</button>
            <button class="action-btn secondary" onclick="learnMore()">T√¨m hi·ªÉu th√™m</button>
        </div>
    `;

    return card;
}

/**
 * Format Message Content
 */
function formatMessage(content) {
    // Basic text formatting
    return content
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>');
}

/**
 * Show/Hide Typing Indicator
 */
function showTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) {
        indicator.style.display = 'flex';
        scrollToBottom();
    }
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) {
        indicator.style.display = 'none';
    }
}

/**
 * Scroll to Bottom of Chat
 */
function scrollToBottom() {
    const chatMessages = document.getElementById('chat-messages');
    if (chatMessages) {
        setTimeout(() => {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }, 100);
    }
}

/**
 * Voice Recording Functionality
 */
async function toggleVoiceRecording() {
    const voiceButton = document.getElementById('voice-btn');
    const voiceRecording = document.getElementById('voice-recording');

    if (!isRecording) {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                processVoiceInput(audioBlob);
                stream.getTracks().forEach(track => track.stop());
            };

            mediaRecorder.start();
            isRecording = true;

            // Update UI
            voiceButton.classList.add('active');
            voiceRecording.style.display = 'block';

        } catch (error) {
            console.error('Error accessing microphone:', error);
            alert('Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng ki·ªÉm tra quy·ªÅn.');
        }
    } else {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
        isRecording = false;

        // Update UI
        voiceButton.classList.remove('active');
        voiceRecording.style.display = 'none';
    }
}

/**
 * Process Voice Input
 */
async function processVoiceInput(audioBlob) {
    try {
        // Show processing message
        addMessage('ƒêang x·ª≠ l√Ω gi·ªçng n√≥i...', 'ai');

        // Simulate voice-to-text processing
        // In real implementation, send to speech-to-text API
        setTimeout(() => {
            const transcribedText = 'T√¥i b·ªã ƒëau ƒë·∫ßu v√† ch√≥ng m·∫∑t'; // Mock transcription
            addMessage(`ƒê√£ nh·∫≠n: "${transcribedText}"`, 'ai');

            // Process as regular text message
            getAIResponse(transcribedText).then(response => {
                addMessage(response.message, 'ai', response.type, response.data);
            });
        }, 2000);

    } catch (error) {
        console.error('Error processing voice input:', error);
        addMessage('C√≥ l·ªói khi x·ª≠ l√Ω gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.', 'ai', 'error');
    }
}

/**
 * Initialize Quick Replies
 */
function initializeQuickReplies() {
    const quickReplies = document.getElementById('quick-replies');

    if (quickReplies) {
        quickReplies.addEventListener('click', function(event) {
            if (event.target.classList.contains('quick-reply-btn')) {
                const reply = event.target.dataset.reply;
                if (reply) {
                    const messageInput = document.getElementById('message-input');
                    messageInput.value = reply;
                    handleInputChange({ target: messageInput });
                    messageInput.focus();
                }
            }
        });
    }
}

/**
 * Mock AI Response (Replace with actual API calls)
 */
async function getAIResponse(message) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const lowerMessage = message.toLowerCase();

    // Mock responses based on keywords
    if (lowerMessage.includes('ƒëau ƒë·∫ßu') || lowerMessage.includes('headache')) {
        return {
            message: 'T√¥i hi·ªÉu b·∫°n ƒëang b·ªã ƒëau ƒë·∫ßu. H√£y cho t√¥i bi·∫øt th√™m v·ªÅ tri·ªáu ch·ª©ng c·ªßa b·∫°n.',
            type: 'medical-insight',
            data: {
                severity: 'medium',
                severityText: 'M·ª©c ƒë·ªô trung b√¨nh',
                symptoms: 'ƒêau ƒë·∫ßu v√† ch√≥ng m·∫∑t',
                causes: [
                    'Thi·∫øu n∆∞·ªõc ho·∫∑c m·∫•t ng·ªß',
                    'Huy·∫øt √°p thay ƒë·ªïi',
                    'Stress ho·∫∑c cƒÉng th·∫≥ng',
                    'C√≥ th·ªÉ do th·ªùi ti·∫øt'
                ],
                recommendations: [
                    { icon: 'üíß', text: 'U·ªëng ƒë·ªß 2 l√≠t n∆∞·ªõc/ng√†y' },
                    { icon: 'üò¥', text: 'Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß (7-8 ti·∫øng)' },
                    { icon: 'ü©∏', text: 'ƒêo huy·∫øt √°p t·∫°i nh√†' },
                    { icon: 'üö´', text: 'Tr√°nh caffeine v√† r∆∞·ª£u bia' }
                ]
            }
        };
    }

    if (lowerMessage.includes('s·ªët') || lowerMessage.includes('fever')) {
        return {
            message: 'Tri·ªáu ch·ª©ng s·ªët c·∫ßn ƒë∆∞·ª£c theo d√µi k·ªπ. B·∫°n s·ªët bao nhi√™u ƒë·ªô?',
            type: 'medical-insight',
            data: {
                severity: 'high',
                severityText: 'C·∫ßn theo d√µi',
                symptoms: 'S·ªët cao',
                causes: [
                    'Nhi·ªÖm tr√πng',
                    'Vi√™m ƒë∆∞·ªùng h√¥ h·∫•p',
                    'COVID-19 ho·∫∑c c·∫£m c√∫m',
                    'C√°c b·ªánh truy·ªÅn nhi·ªÖm kh√°c'
                ],
                recommendations: [
                    { icon: 'üå°Ô∏è', text: 'Theo d√µi nhi·ªát ƒë·ªô m·ªói 4 gi·ªù' },
                    { icon: 'üíä', text: 'U·ªëng thu·ªëc h·∫° s·ªët n·∫øu >38.5¬∞C' },
                    { icon: 'üíß', text: 'U·ªëng nhi·ªÅu n∆∞·ªõc' },
                    { icon: 'üè•', text: 'Kh√°m ngay n·∫øu s·ªët >39¬∞C' }
                ]
            }
        };
    }

    // Default response
    return {
        message: 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. D·ª±a tr√™n tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£, t√¥i khuy·∫øn ngh·ªã b·∫°n n√™n theo d√µi th√™m v√† c√≥ th·ªÉ c·∫ßn thƒÉm kh√°m b√°c sƒ©. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi ti·∫øt kh√¥ng?',
        type: 'text'
    };
}

/**
 * Emergency Modal Functions
 */
function showEmergencyModal() {
    const modal = document.getElementById('emergency-modal');
    if (modal) {
        modal.style.display = 'flex';
    }
}

function closeEmergencyModal() {
    const modal = document.getElementById('emergency-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// Make functions globally available
window.closeEmergencyModal = closeEmergencyModal;
window.scheduleAppointment = function() {
    addMessage('ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t l·ªãch...', 'ai');
    // In real app, redirect to appointment page
};
window.learnMore = function() {
    addMessage('T√¥i s·∫Ω cung c·∫•p th√™m th√¥ng tin chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng c·ªßa b·∫°n.', 'ai');
};